{"ast":null,"code":"import { GENRES_LOADING, GENRES_RECEIVED, GENRES_ERROR } from '../actions/genresActions';\n\n// Defining the initial state for the genres slice\nconst initialState = {\n  genres: [],\n  // To hold the list of genres fetched from the API\n  status: 'idle',\n  // Possible statuses: 'idle', 'loading', 'succeeded', 'failed'\n  error: null // To hold the error message when the API call fails\n};\n\n// Reducer function for the genres slice\nconst genresReducer = (state = initialState, action) => {\n  // Checks the action type and updates the state accordingly\n  switch (action.type) {\n    case GENRES_LOADING:\n      return {\n        ...state,\n        // Copies the current state\n        status: 'loading' // Sets the status to 'loading' indicating an API call is in progress\n      };\n    case GENRES_RECEIVED:\n      return {\n        ...state,\n        status: 'succeeded',\n        // Sets the status to 'succeeded' indicating the API call was successful\n        genres: action.payload // Updates the genres array with the data fetched from the API\n      };\n    case GENRES_ERROR:\n      return {\n        ...state,\n        status: 'failed',\n        // Sets the status to 'failed' indicating the API call failed\n        error: action.payload // Updates the error message with the error received from the API\n      };\n    default:\n      // If the action type does not match any of the above, the reducer returns the current state\n      return state;\n  }\n};\nexport default genresReducer;","map":{"version":3,"names":["GENRES_LOADING","GENRES_RECEIVED","GENRES_ERROR","initialState","genres","status","error","genresReducer","state","action","type","payload"],"sources":["/Users/kayleydonnelly/Desktop/Coding/CFGdegree/Assignments/group-project/group4/spotify-app/src/store/reducers/genresReducer.js"],"sourcesContent":["import { GENRES_LOADING, GENRES_RECEIVED, GENRES_ERROR } from '../actions/genresActions';\n\n// Defining the initial state for the genres slice\nconst initialState = {\n  genres: [], // To hold the list of genres fetched from the API\n  status: 'idle', // Possible statuses: 'idle', 'loading', 'succeeded', 'failed'\n  error: null, // To hold the error message when the API call fails\n};\n\n// Reducer function for the genres slice\nconst genresReducer = (state = initialState, action) => {\n  // Checks the action type and updates the state accordingly\n  switch (action.type) {\n    case GENRES_LOADING:\n      return {\n        ...state, // Copies the current state\n        status: 'loading', // Sets the status to 'loading' indicating an API call is in progress\n      };\n    case GENRES_RECEIVED:\n      return {\n        ...state,\n        status: 'succeeded', // Sets the status to 'succeeded' indicating the API call was successful\n        genres: action.payload, // Updates the genres array with the data fetched from the API\n      };\n    case GENRES_ERROR:\n      return {\n        ...state,\n        status: 'failed', // Sets the status to 'failed' indicating the API call failed\n        error: action.payload, // Updates the error message with the error received from the API\n      };\n    default: // If the action type does not match any of the above, the reducer returns the current state\n      return state;\n  }\n};\n\nexport default genresReducer;\n\n"],"mappings":"AAAA,SAASA,cAAc,EAAEC,eAAe,EAAEC,YAAY,QAAQ,0BAA0B;;AAExF;AACA,MAAMC,YAAY,GAAG;EACnBC,MAAM,EAAE,EAAE;EAAE;EACZC,MAAM,EAAE,MAAM;EAAE;EAChBC,KAAK,EAAE,IAAI,CAAE;AACf,CAAC;;AAED;AACA,MAAMC,aAAa,GAAGA,CAACC,KAAK,GAAGL,YAAY,EAAEM,MAAM,KAAK;EACtD;EACA,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAKV,cAAc;MACjB,OAAO;QACL,GAAGQ,KAAK;QAAE;QACVH,MAAM,EAAE,SAAS,CAAE;MACrB,CAAC;IACH,KAAKJ,eAAe;MAClB,OAAO;QACL,GAAGO,KAAK;QACRH,MAAM,EAAE,WAAW;QAAE;QACrBD,MAAM,EAAEK,MAAM,CAACE,OAAO,CAAE;MAC1B,CAAC;IACH,KAAKT,YAAY;MACf,OAAO;QACL,GAAGM,KAAK;QACRH,MAAM,EAAE,QAAQ;QAAE;QAClBC,KAAK,EAAEG,MAAM,CAACE,OAAO,CAAE;MACzB,CAAC;IACH;MAAS;MACP,OAAOH,KAAK;EAChB;AACF,CAAC;AAED,eAAeD,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}