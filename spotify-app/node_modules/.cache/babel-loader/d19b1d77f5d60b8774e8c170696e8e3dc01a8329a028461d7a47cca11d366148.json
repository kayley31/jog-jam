{"ast":null,"code":"import { RECOMMENDATIONS_LOADING, RECOMMENDATIONS_RECEIVED, RECOMMENDATIONS_ERROR } from '../actions/recommendationsActions';\n\n// Defining the initial state for the recommendations slice\nconst initialState = {\n  recommendations: [],\n  // To hold the list of recommendations fetched from the API\n  status: 'idle',\n  // Possible statuses: 'idle', 'loading', 'succeeded', 'failed'\n  error: null // To hold the error message when the API call fails\n};\nconst recommendationsReducer = (state = initialState, action) => {\n  // Checks the action type and updates the state accordingly\n  switch (action.type) {\n    case RECOMMENDATIONS_LOADING:\n      return {\n        ...state,\n        // Copies the current state\n        status: 'loading' // Sets the status to 'loading' indicating an API call is in progress\n      };\n    case RECOMMENDATIONS_RECEIVED:\n      return {\n        ...state,\n        status: 'succeeded',\n        // Sets the status to 'succeeded' indicating the API call was successful\n        recommendations: action.payload // Updates the recommendations array with the data fetched from the API\n      };\n    case RECOMMENDATIONS_ERROR:\n      return {\n        ...state,\n        status: 'failed',\n        // Sets the status to 'failed' indicating the API call failed\n        error: action.payload // Sets the error message to the value returned by the API\n      };\n    default:\n      // If the action type does not match any of the above, the reducer returns the current state\n      return state;\n  }\n};\nexport default recommendationsReducer;","map":{"version":3,"names":["RECOMMENDATIONS_LOADING","RECOMMENDATIONS_RECEIVED","RECOMMENDATIONS_ERROR","initialState","recommendations","status","error","recommendationsReducer","state","action","type","payload"],"sources":["/Users/kayleydonnelly/Desktop/Coding/CFGdegree/Assignments/group-project/group4/spotify-app/src/store/reducers/recommendationsReducer.js"],"sourcesContent":["import { RECOMMENDATIONS_LOADING, RECOMMENDATIONS_RECEIVED, RECOMMENDATIONS_ERROR } from '../actions/recommendationsActions';\n\n// Defining the initial state for the recommendations slice\nconst initialState = {\n  recommendations: [], // To hold the list of recommendations fetched from the API\n  status: 'idle', // Possible statuses: 'idle', 'loading', 'succeeded', 'failed'\n  error: null, // To hold the error message when the API call fails\n};\n\nconst recommendationsReducer = (state = initialState, action) => {\n  // Checks the action type and updates the state accordingly\n  switch (action.type) {\n    case RECOMMENDATIONS_LOADING:\n      return {\n        ...state, // Copies the current state\n        status: 'loading', // Sets the status to 'loading' indicating an API call is in progress\n      };\n    case RECOMMENDATIONS_RECEIVED:\n      return {\n        ...state,\n        status: 'succeeded', // Sets the status to 'succeeded' indicating the API call was successful\n        recommendations: action.payload, // Updates the recommendations array with the data fetched from the API\n      };\n    case RECOMMENDATIONS_ERROR:\n      return {\n        ...state,\n        status: 'failed', // Sets the status to 'failed' indicating the API call failed\n        error: action.payload, // Sets the error message to the value returned by the API\n      };\n    default: // If the action type does not match any of the above, the reducer returns the current state\n      return state;\n  }\n};\n\nexport default recommendationsReducer;\n"],"mappings":"AAAA,SAASA,uBAAuB,EAAEC,wBAAwB,EAAEC,qBAAqB,QAAQ,mCAAmC;;AAE5H;AACA,MAAMC,YAAY,GAAG;EACnBC,eAAe,EAAE,EAAE;EAAE;EACrBC,MAAM,EAAE,MAAM;EAAE;EAChBC,KAAK,EAAE,IAAI,CAAE;AACf,CAAC;AAED,MAAMC,sBAAsB,GAAGA,CAACC,KAAK,GAAGL,YAAY,EAAEM,MAAM,KAAK;EAC/D;EACA,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAKV,uBAAuB;MAC1B,OAAO;QACL,GAAGQ,KAAK;QAAE;QACVH,MAAM,EAAE,SAAS,CAAE;MACrB,CAAC;IACH,KAAKJ,wBAAwB;MAC3B,OAAO;QACL,GAAGO,KAAK;QACRH,MAAM,EAAE,WAAW;QAAE;QACrBD,eAAe,EAAEK,MAAM,CAACE,OAAO,CAAE;MACnC,CAAC;IACH,KAAKT,qBAAqB;MACxB,OAAO;QACL,GAAGM,KAAK;QACRH,MAAM,EAAE,QAAQ;QAAE;QAClBC,KAAK,EAAEG,MAAM,CAACE,OAAO,CAAE;MACzB,CAAC;IACH;MAAS;MACP,OAAOH,KAAK;EAChB;AACF,CAAC;AAED,eAAeD,sBAAsB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}