{"ast":null,"code":"var _jsxFileName = \"/Users/kayleydonnelly/Desktop/Coding/CFGdegree/Assignments/group-project/group4/spotify-app/src/Components/NewPlaylist.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport './NewPlaylist.css';\nimport Popup from './Popup';\n\n// Array of image paths for playlist covers\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst playlistCovers = ['./covers/runner.png', './covers/shoe.png', './covers/band.png', './covers/conductor.png', './covers/drum.png', './covers/guitar.png', './covers/mic.png', './covers/saxophone.png', './covers/singing.png', './covers/trumpet.png', './covers/violin.png'];\nconst NewPlaylist = ({\n  limit\n}) => {\n  _s();\n  // Accessing the playlists state from the Redux store\n  const playlists = useSelector(state => state.playlists.playlists);\n\n  // State to keep track of the currently selected playlist\n  const [selectedPlaylist, setSelectedPlaylist] = useState(null);\n  const openPlaylist = playlist => {\n    setSelectedPlaylist(playlist);\n  };\n  const closeModal = () => {\n    setSelectedPlaylist(null);\n  };\n\n  // Apply the limit to playlists if limit prop is provided\n  const displayedPlaylists = limit ? playlists.slice(0, limit) : playlists;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [playlists.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"playlist-container\",\n      children: displayedPlaylists.map((playlist, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"playlist-item\",\n        onClick: () => openPlaylist(playlist),\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"playlist-cover\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: playlistCovers[index % playlistCovers.length],\n            alt: playlist.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: playlist.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 29\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No playlists found.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(Popup, {\n      show: selectedPlaylist !== null,\n      onClose: closeModal,\n      children: selectedPlaylist && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tracks\",\n        children: selectedPlaylist.tracks.map(track => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"track-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: track.album.images[0].url,\n            alt: track.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"track-details\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"track-name\",\n              children: track.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n              children: track.artists.map(artist => artist.name).join(', ')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n              href: track.external_urls.spotify,\n              target: \"_blank\",\n              rel: \"noopener noreferrer\",\n              children: \"Listen on Spotify\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 33\n          }, this)]\n        }, track.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n};\n_s(NewPlaylist, \"VsCBOtQ3BdFulrtUH0eTvjpVsro=\", false, function () {\n  return [useSelector];\n});\n_c = NewPlaylist;\nexport default NewPlaylist;\nvar _c;\n$RefreshReg$(_c, \"NewPlaylist\");","map":{"version":3,"names":["React","useState","useSelector","Popup","jsxDEV","_jsxDEV","playlistCovers","NewPlaylist","limit","_s","playlists","state","selectedPlaylist","setSelectedPlaylist","openPlaylist","playlist","closeModal","displayedPlaylists","slice","children","length","className","map","index","onClick","src","alt","name","fileName","_jsxFileName","lineNumber","columnNumber","show","onClose","tracks","track","album","images","url","artists","artist","join","href","external_urls","spotify","target","rel","id","_c","$RefreshReg$"],"sources":["/Users/kayleydonnelly/Desktop/Coding/CFGdegree/Assignments/group-project/group4/spotify-app/src/Components/NewPlaylist.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport './NewPlaylist.css';\nimport Popup from './Popup';\n\n// Array of image paths for playlist covers\nconst playlistCovers = [\n    './covers/runner.png',\n    './covers/shoe.png',\n    './covers/band.png',\n    './covers/conductor.png',\n    './covers/drum.png',\n    './covers/guitar.png',\n    './covers/mic.png',\n    './covers/saxophone.png',\n    './covers/singing.png',\n    './covers/trumpet.png',\n    './covers/violin.png'\n];\n\nconst NewPlaylist = ({ limit }) => {\n    \n    // Accessing the playlists state from the Redux store\n    const playlists = useSelector((state => state.playlists.playlists));\n    \n    // State to keep track of the currently selected playlist\n    const [selectedPlaylist, setSelectedPlaylist] = useState(null);\n    \n    const openPlaylist = (playlist) => {\n        setSelectedPlaylist(playlist);\n    };\n\n    const closeModal = () => {\n        setSelectedPlaylist(null);\n    };\n\n    // Apply the limit to playlists if limit prop is provided\n    const displayedPlaylists = limit ? playlists.slice(0, limit) : playlists;\n\n    return (\n        <div>\n            {playlists.length > 0 ? (\n                <div className=\"playlist-container\">\n                    {displayedPlaylists.map((playlist, index) => (\n                        <div key={index} className=\"playlist-item\" onClick={() => openPlaylist(playlist)}>\n                            <div className=\"playlist-cover\">\n                                <img src={playlistCovers[index % playlistCovers.length]} alt={playlist.name} />\n                                <h2>{playlist.name}</h2>\n                            </div>\n                        </div>\n                    ))}\n                </div>\n            ) : (\n                <p>No playlists found.</p>\n            )}\n            <Popup show={selectedPlaylist !== null} onClose={closeModal}>\n                {selectedPlaylist && (\n                    <div className=\"tracks\">\n                        {selectedPlaylist.tracks.map(track => (\n                            <div key={track.id} className=\"track-item\">\n                                <img src={track.album.images[0].url} alt={track.name} />\n                                <div className=\"track-details\">\n                                    <h3 className='track-name'>{track.name}</h3>\n                                    <h6>{track.artists.map(artist => artist.name).join(', ')}</h6>\n                                    <a href={track.external_urls.spotify} target=\"_blank\" rel=\"noopener noreferrer\">Listen on Spotify</a>\n                                </div>\n                            </div>\n                        ))}\n                    </div>\n                )}\n            </Popup>\n        </div>\n    );\n};\n\nexport default NewPlaylist;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}