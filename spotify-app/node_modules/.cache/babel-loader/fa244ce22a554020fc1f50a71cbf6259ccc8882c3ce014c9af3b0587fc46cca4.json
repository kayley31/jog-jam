{"ast":null,"code":"import { configureStore } from '@reduxjs/toolkit';\nimport { persistStore, persistReducer,\n// Used for persisting state across sessions (like localStorage)\nFLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport rootReducer from './reducers';\n\n// Defining the configuration for redux-persist\nconst persistConfig = {\n  key: 'root',\n  // Used to store the state in localStorage\n  storage,\n  // Defaults to localStorage\n  whitelist: ['playlists'] // Only persist the playlists slice of state\n};\n\n// This sets up the Redux store with the logic to save/load the state based on the persistedReducer\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\n// The persistor manages the process of saving and loading the state\nconst store = configureStore({\n  reducer: persistedReducer,\n  // This is needed to get rid of the non-serializable error in the console\n  middleware: getDefaultMiddleware => getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER]\n    }\n  })\n});\nexport const persistor = persistStore(store);\nexport default store;","map":{"version":3,"names":["configureStore","persistStore","persistReducer","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","storage","rootReducer","persistConfig","key","whitelist","persistedReducer","store","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","persistor"],"sources":["/Users/kayleydonnelly/Desktop/Coding/CFGdegree/Assignments/group-project/group4/spotify-app/src/store/index.js"],"sourcesContent":["import { configureStore } from '@reduxjs/toolkit';\nimport {\n  persistStore, \n  persistReducer, // Used for persisting state across sessions (like localStorage)\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport rootReducer from './reducers';\n\n// Defining the configuration for redux-persist\nconst persistConfig = {\n  key: 'root', // Used to store the state in localStorage\n  storage, // Defaults to localStorage\n  whitelist: ['playlists'], // Only persist the playlists slice of state\n};\n\n// This sets up the Redux store with the logic to save/load the state based on the persistedReducer\nconst persistedReducer = persistReducer(persistConfig, rootReducer); \n\n// The persistor manages the process of saving and loading the state\nconst store = configureStore({\n  reducer: persistedReducer,\n  // This is needed to get rid of the non-serializable error in the console\n  middleware: (getDefaultMiddleware) => \n    getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER], \n      },\n    }),\n})\n\nexport const persistor = persistStore(store);\nexport default store;\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,kBAAkB;AACjD,SACEC,YAAY,EACZC,cAAc;AAAE;AAChBC,KAAK,EACLC,SAAS,EACTC,KAAK,EACLC,OAAO,EACPC,KAAK,EACLC,QAAQ,QACH,eAAe;AACtB,OAAOC,OAAO,MAAM,2BAA2B;AAC/C,OAAOC,WAAW,MAAM,YAAY;;AAEpC;AACA,MAAMC,aAAa,GAAG;EACpBC,GAAG,EAAE,MAAM;EAAE;EACbH,OAAO;EAAE;EACTI,SAAS,EAAE,CAAC,WAAW,CAAC,CAAE;AAC5B,CAAC;;AAED;AACA,MAAMC,gBAAgB,GAAGZ,cAAc,CAACS,aAAa,EAAED,WAAW,CAAC;;AAEnE;AACA,MAAMK,KAAK,GAAGf,cAAc,CAAC;EAC3BgB,OAAO,EAAEF,gBAAgB;EACzB;EACAG,UAAU,EAAGC,oBAAoB,IAC/BA,oBAAoB,CAAC;IACnBC,iBAAiB,EAAE;MACjBC,cAAc,EAAE,CAACjB,KAAK,EAAEC,SAAS,EAAEC,KAAK,EAAEC,OAAO,EAAEC,KAAK,EAAEC,QAAQ;IACpE;EACF,CAAC;AACL,CAAC,CAAC;AAEF,OAAO,MAAMa,SAAS,GAAGpB,YAAY,CAACc,KAAK,CAAC;AAC5C,eAAeA,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}